{"version":3,"sources":["layers/layers.js","Components/Controller.js","App.js","serviceWorker.js","index.js"],"names":["colorRange","LIGHT_SETTINGS","lightsPosition","ambientRatio","diffuseRatio","specularRatio","lightsStrength","numberOfLights","parkingLayer","show","arguments","length","undefined","GeoJsonLayer","id","data","parkingData","pickable","stroked","filled","extruded","lineWidthScale","lineWidthMinPixels","getFillColor","getLineColor","getRadius","getLineWidth","getElevation","visible","busStopLayer","busStopData","cycleTrafficLayer","getColorValue","points","reduce","a","c","value","HexagonLayer","cycleTrafficData","radius","elevationScale","getPosition","d","long","lat","getElevationValue","lightSettings","opacity","carTrafficLayer","Object","defineProperty","carTrafficData","App","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","_toggleParking","e","_ref","checked","setState","showParking","setTimeout","_updateLayers","_toggleBusStops","_ref2","showBusStops","_toggleCycleTraffic","_ref3","showCycleTraffic","_toggleCycleTrafficExtrude","_ref4","extrudeCycleTraffic","_toggleCarTraffic","_ref5","showCarTraffic","_toggleCarTrafficExtrude","_ref6","extrudeCarTraffic","layers","state","props","onLayerChange","react_default","createElement","className","Checkbox","label","ref","type","onChange","defaultChecked","disabled","React","Component","initialViewState","longitude","latitude","zoom","pitch","bearing","_onWebGLInitialized","gl","enable","DEPTH_TEST","depthFunc","LEQUAL","_onLayerChange","mapLayers","hoveredObject","pointerX","pointerY","style","position","zIndex","pointerEvents","left","top","message","document","getElementById","addEventListener","evt","preventDefault","_this2","esm","_deck","deck","onWebGLInitialized","controller","dist_esm","_map","getMap","mapboxApiAccessToken","onLoad","_onMapLoad","mapStyle","preventStyleDiffing","_renderTooltip","Components_Controller","href","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f9db8a0e.chunk.js","sourcesContent":["import { GeoJsonLayer, HexagonLayer } from 'deck.gl';\n\nimport parkingData from '../data/Stockholm_Parking.json';\nimport busStopData from '../data/bus_stops_geo.json';\nimport cycleTrafficData from '../data/cycle_data_final.json';\nimport carTrafficData from '../data/cars_data_final.json';\n\nconst colorRange = [\n  [1, 152, 189],\n  [73, 227, 206],\n  [216, 254, 181],\n  [254, 237, 177],\n  [254, 173, 84],\n  [209, 55, 78]\n];\n\nconst LIGHT_SETTINGS = {\n  lightsPosition: [16.56, 57.83, 8000, 19.56, 60.83, 8000],\n  ambientRatio: 0.4,\n  diffuseRatio: 0.6,\n  specularRatio: 0.2,\n  lightsStrength: [0.8, 0.0, 0.8, 0.0],\n  numberOfLights: 2\n};\n\nconst parkingLayer = (show=true) => {\n  return new GeoJsonLayer({\n    id: 'parking-layer',\n    data: parkingData,\n    pickable: true,\n    stroked: true,\n    filled: false,\n    extruded: true,\n    lineWidthScale: 20,\n    lineWidthMinPixels: 2,\n    getFillColor: [200, 200, 255, 200],\n    getLineColor: [200, 200, 255, 200],\n    getRadius: 100,\n    getLineWidth: 1,\n    getElevation: 0,\n    visible: show,\n    // onHover: ({object, x, y}) => {\n    //console.log('h', object)\n    //   const tooltip = object.properties.name || object.properties.station;\n    //    Update tooltip\n    //      http://deck.gl/#/documentation/developer-guide/adding-interactivity?section=example-display-a-tooltip-for-hovered-object\n\n    // }\n  })\n}\n\nconst busStopLayer = (show=true) => {\n\n  return new GeoJsonLayer({\n    id: 'bus-stop-layer',\n    data: busStopData,\n    pickable: true,\n    stroked: true,\n    filled: true,\n    // extruded: true,\n    lineWidthScale: 20,\n    lineWidthMinPixels: 2,\n    getFillColor: [255, 120, 255, 200],\n    getLineColor: [255, 120, 255, 200],\n    getRadius: 10,\n    getLineWidth: 1,\n    getElevation: 0,\n    visible: show,\n    // onHover: ({object, x, y}) => {\n    // //console.log('h', object)\n    //   if(object) {\n    //     const tooltip = `${object.properties.StopPointName}\n    //       ${object.properties.StopPointNumber}`\n\n    //     // this.props.onHover(tooltip)\n    //   }\n    // }\n  })\n\n}\n\nconst cycleTrafficLayer = (show=true, extruded=true) => {\n\n  function getColorValue(points) {\n    return points.reduce((a,c) => a + c.value, 0)\n  }\n\n  return new HexagonLayer({\n    id: 'hexagon-layer',\n    data: cycleTrafficData,\n    pickable: true,\n    extruded: extruded,\n    radius: 20,\n    elevationScale: 1,\n    colorRange,\n    getPosition: d => {\n      return [ +d.long, +d.lat ]\n    },\n    getColorValue,\n    getElevationValue: getColorValue,\n    lightSettings: LIGHT_SETTINGS,\n    opacity:1,\n    visible: show,\n    // onHover: ({object, x, y}) => {\n      // const tooltip = `${object.centroid.join(', ')}\\nCount: ${object.points.length}`;\n      /* Update tooltip\n         http://deck.gl/#/documentation/developer-guide/adding-interactivity?section=example-display-a-tooltip-for-hovered-object\n      */\n    // }\n  })\n}\n\nconst carTrafficLayer = (show=true, extruded=true) => {\n\n  function getColorValue(points) {\n    return points.reduce((a,c) => a + +c.value, 0)\n  }\n  \n    return new HexagonLayer({\n      id: 'car-traffic-layer',\n      data: carTrafficData,\n      pickable: true,\n      extruded: extruded,\n      radius: 20,\n      elevationScale: 1,\n      colorRange,\n      getPosition: d => {\n        return [ +d.long, +d.lat ]\n      },\n      getColorValue,\n      getElevationValue: getColorValue,\n      visible: true,\n      lightSettings: LIGHT_SETTINGS,\n      opacity:1,\n      visible: show\n    })\n  }\n\nconst buildingsLayer = () => {\n\n  return {\n    'id': '3d-buildings',\n    'source': 'composite',\n    'source-layer': 'building',\n    'filter': ['==', 'extrude', 'true'],\n    'type': 'fill-extrusion',\n    'minzoom': 15,\n    'paint': {\n      'fill-extrusion-color': '#aaa',\n      // use an 'interpolate' expression to add a smooth transition effect to the\n      // buildings as the user zooms in\n      'fill-extrusion-height': [\n        \"interpolate\", [\"linear\"], [\"zoom\"],\n        15, 0,\n        15.05, [\"get\", \"height\"]\n        ],\n        'fill-extrusion-base': [\n        \"interpolate\", [\"linear\"], [\"zoom\"],\n        15, 0,\n        15.05, [\"get\", \"min_height\"]\n        ],\n        'fill-extrusion-opacity': .6\n    }\n  }\n}\n\nexport {\n  parkingLayer,\n  busStopLayer,\n  cycleTrafficLayer,\n  carTrafficLayer\n}\n","import React from 'react';\nimport {\n  parkingLayer,\n  busStopLayer,\n  cycleTrafficLayer,\n  carTrafficLayer\n} from '../layers/layers'\nimport '../Controller.css'\n\n\nimport { Checkbox } from 'semantic-ui-react';\n\nclass App extends React.Component {\n\n  constructor() {\n    super();\n\n    this.state = {\n      showParking: false,\n      showBusStops: true,\n      showCycleTraffic: false,\n      extrudeCycleTraffic: true,\n      showCarTraffic: true,\n      extrudeCarTraffic: true,\n    };\n  }\n\n  _toggleParking = (e, { checked }) => {\n    this.setState({showParking: checked })\n    // Note: Dirty - find the right way to do this\n    setTimeout(this._updateLayers,0)\n  }\n\n  _toggleBusStops = (e, { checked }) => {\n    this.setState({showBusStops: checked })\n    // Note: Dirty - find the right way to do this\n    setTimeout(this._updateLayers,0)\n  }\n\n  _toggleCycleTraffic = (e, { checked }) => {\n    this.setState({showCycleTraffic: checked })\n    // Note: Dirty - find the right way to do this\n    setTimeout(this._updateLayers,0)\n  }\n\n  _toggleCycleTrafficExtrude = (e, { checked }) => {\n    this.setState({extrudeCycleTraffic: checked })\n    // Note: Dirty - find the right way to do this\n    setTimeout(this._updateLayers,0)\n  }\n\n  _toggleCarTraffic = (e, { checked }) => {\n    this.setState({showCarTraffic: checked })\n    // Note: Dirty - find the right way to do this\n    setTimeout(this._updateLayers,0)\n  }\n\n  _toggleCarTrafficExtrude = (e, { checked }) => {\n    this.setState({extrudeCarTraffic: checked })\n    // Note: Dirty - find the right way to do this\n    setTimeout(this._updateLayers,0)\n  }\n\n  _updateLayers = () => {\n\n    let layers = [\n        parkingLayer( this.state.showParking ),\n        busStopLayer( this.state.showBusStops ),\n        cycleTrafficLayer( this.state.showCycleTraffic, this.state.extrudeCycleTraffic ),\n        carTrafficLayer( this.state.showCarTraffic, this.state.extrudeCarTraffic )\n      ]\n\n    this.props.onLayerChange( layers )\n\n  }\n\n  componentDidMount() {\n    this._updateLayers()\n  }\n\n  render() {\n    return(\n      <div className=\"controller-container\">\n        <h3>Stockholm Sustainable Traffic Planning</h3>\n        <p>Toggle the checkboxes below to turn layers on&nbsp;and&nbsp;off</p>\n\n        <div className=\"controller-option option-parking\">\n          <Checkbox label=\"Parking\" ref=\"parkingCheck\" type=\"checkbox\" onChange={ this._toggleParking }/>\n        </div>\n        <div className=\"controller-option option-bus-stops\">\n          <Checkbox label=\"Bus Stops\" ref=\"busStopCheck\" type=\"checkbox\" defaultChecked onChange={ this._toggleBusStops }/>\n        </div>\n        <div className=\"controller-option option-cycle-traffic\">\n          <Checkbox label=\"Bicycle Traffic\" ref=\"cycleTrafficCheck\" type=\"checkbox\" onChange={ this._toggleCycleTraffic }/>\n        </div>\n        <div className=\"controller-option option-extrude-checkbox\">\n        {\n          this.state.showCycleTraffic ?\n          <Checkbox label=\"Extrude Bicycle Traffic\" ref=\"cycleTrafficCheck\" type=\"checkbox\" defaultChecked onChange={ this._toggleCycleTrafficExtrude }/> :\n          <Checkbox label=\"Extrude Bicycle Traffic\" ref=\"cycleTrafficCheck\" type=\"checkbox\" defaultChecked disabled onChange={ this._toggleCycleTrafficExtrude }/>\n        }\n        </div>\n\n        <div className=\"controller-option option-car-traffic\">\n          <Checkbox label=\"Vehicle Traffic\" ref=\"carTrafficCheck\" type=\"checkbox\" defaultChecked onChange={ this._toggleCarTraffic }/>\n        </div>\n        <div className=\"controller-option option-extrude-checkbox\">\n        {\n          this.state.showCarTraffic ?\n          <Checkbox label=\"Extrude Vehicle Traffic\" ref=\"carTrafficCheck\" type=\"checkbox\" defaultChecked onChange={ this._toggleCarTrafficExtrude }/> :\n          <Checkbox label=\"Extrude Vehicle Traffic\" ref=\"carTrafficCheck\" type=\"checkbox\" defaultChecked disabled onChange={ this._toggleCarTrafficExtrude }/>\n        }\n        </div>\n\n        <div className=\"controller-option\">*right click and drag to rotate camera</div>\n      </div>\n    )\n  }\n\n}\n\nexport default App;\n","import React from 'react';\nimport DeckGL from 'deck.gl';\nimport MapGL from 'react-map-gl';\n\nimport Controller from './Components/Controller'\n\nimport 'mapbox-gl/dist/mapbox-gl.css'\nimport './App.css'\n\n// Set your mapbox access token here\nconst MAPBOX_ACCESS_TOKEN = 'pk.eyJ1IjoiYWRhbWVrYmVyZyIsImEiOiJjamttcXdjeDMwZHd0M2tvemx1a3BnZ2h5In0.JtC9rUXVaxJ8ONGdfmPmsg';\n\n// Initial viewport settings\nconst initialViewState = {\n  longitude: 18.0686,\n  latitude: 59.3293,\n  zoom: 13,\n  pitch: 45,\n  bearing: 0,\n};\n\nclass App extends React.Component {\n\n  constructor() {\n    super();\n\n    this.state = {\n      showParking: true,\n      showBusStops: true,\n      mapLayers: []\n    };\n  }\n\n  _onWebGLInitialized = (gl) => {\n    gl.enable(gl.DEPTH_TEST);\n    gl.depthFunc(gl.LEQUAL);\n    this.setState({gl});\n  }\n\n  // _onMapLoad = () => {\n    // const map = this._map;\n    // const deck = this._deck;\n\n    // map.addLayer(buildingsLayer())\n    // map.addLayer(new MapboxLayer({ id: 'layer-abc', deck }));\n  // }\n\n  _onLayerChange = (mapLayers) => {\n    this.setState({ mapLayers })\n  }\n\n  _renderTooltip() {\n    const {hoveredObject, pointerX, pointerY} = this.state || {};\n    return hoveredObject && (\n      <div style={{position: 'absolute', zIndex: 1, pointerEvents: 'none', left: pointerX, top: pointerY}}>\n        { hoveredObject.message }\n      </div>\n    );\n  }\n\n  componentDidMount() {\n    document.getElementById('container').addEventListener('contextmenu', evt => evt.preventDefault());\n  }\n\n  render() {\n    const { gl } = this.state;\n\n    const layers = this.state.mapLayers\n\n    return (\n      <div id=\"container\">\n\n        <DeckGL\n          ref={ref => {\n              // save a reference to the Deck instance\n              this._deck = ref && ref.deck;\n          }}\n          onWebGLInitialized={this._onWebGLInitialized}\n          initialViewState={initialViewState}\n          controller={true}\n          layers={layers}\n        >\n        { gl && (\n          <MapGL\n            ref={ref => {\n                // save a reference to the mapboxgl.Map instance\n                this._map = ref && ref.getMap();\n              }}\n            mapboxApiAccessToken={MAPBOX_ACCESS_TOKEN}\n            // gl={gl}\n            onLoad={this._onMapLoad}\n            mapStyle=\"mapbox://styles/mapbox/dark-v10\"\n            preventStyleDiffing={true}\n          >\n\n          </MapGL>\n\n        )}\n        { this._renderTooltip() }\n        </DeckGL>\n\n        <Controller onLayerChange={ this._onLayerChange }/>\n\n        <div className=\"footer\">2019 Tyler Wolf and Adam Ekberg - Data Source: <a href=\"https://open.stockholm.se/\">https://open.stockholm.se/</a></div>\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}